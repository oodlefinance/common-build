apply plugin: 'groovy'
apply plugin: 'java-library'

group = projectGroup

version = "$projectMajorVersion.$projectMinorVersion.$buildNumber"

ext {
	artifactName = "$projectName"
	devopsGradleDir = "${rootDir}/oodle-devops/gradle"
}

repositories {
	mavenLocal()
	maven {
		url "https://${codeartifactDomain}-${awsBuildAccountId}.d.codeartifact.eu-west-1.amazonaws.com/maven/oodle-maven-repo/"
		credentials {
			username "${codeartifactUser}"
			password "${codeartifactToken}"
		}
	}
}

configurations {
	integrationtestImplementation.extendsFrom testImplementation
	integrationtestRuntime.extendsFrom testRuntime
}

sourceSets {
	integrationtest {
		java {
			srcDirs file("src/acceptanceTest/groovy")
		}
		resources.srcDirs file("src/acceptanceTest/resources")
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}

	acceptancetest {
		java {
			srcDirs file("src/acceptanceTest/groovy")
		}
		resources.srcDirs file("src/acceptanceTest/resources")
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}
}

task integrationtest(type: Test, group: 'verification', dependsOn: test) {
	testClassesDirs = sourceSets.integrationtest.output.classesDirs
	classpath = sourceSets.integrationtest.runtimeClasspath
	mustRunAfter test
	beforeTest { descriptor ->
		logger.lifecycle("Running test: " + descriptor)
	}
}

task acceptancetest(type: Test, group: 'verification', dependsOn: test) {
	testClassesDirs = sourceSets.acceptancetest.output.classesDirs
	classpath = sourceSets.acceptancetest.runtimeClasspath
	mustRunAfter test
	beforeTest { descriptor ->
		logger.lifecycle("Running test: " + descriptor)
	}
}

test {
	testLogging {
		events "passed", "skipped", "failed"
		outputs.upToDateWhen { false }
		showStandardStreams = true
	}
}

integrationtest {
	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat "full"
		outputs.upToDateWhen { false }
		showStandardStreams = true
	}
}

def qualityChecks = new File("${devopsGradleDir}/qualityChecks.gradle")
def publishArtifacts = new File("${devopsGradleDir}/publishArtifacts.gradle")
def sonarQube = new File("${devopsGradleDir}/sonarQube.gradle")
def securityScan = new File("${devopsGradleDir}/securityScan.gradle")

if (qualityChecks.exists()) apply from: qualityChecks
if (sonarQube.exists()) apply from: sonarQube
if (publishArtifacts.exists()) apply from: publishArtifacts
if (securityScan.exists()) apply from: securityScan
