// Shared gradle script for java services using spring boot 2.x and dependency locking

import java.text.SimpleDateFormat

println 'Project using lp-service-common script as of ' + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())

buildscript {
    ext {
        devopsGradleDir = "${rootDir}/oodle-devops/gradle"

        springBootVersion = '2+' // Version used for gradle plugin AND framework dependencies
        // Plugin versions
        dependencyCheckVersion = '7+'
        versionsPluginVersion = '+'
        // Versions for dependencies included in this script
        lombokVersion = '1+'
        oodleLoggingVersion = '1+'
        logstashEncoderVersion = '7+'
    }
    // Repository block for sourcing plugins
    repositories {
        maven {
            url "https://${codeartifactDomain}-${awsBuildAccountId}.d.codeartifact.eu-west-1.amazonaws.com/maven/oodle-maven-repo/"
            credentials {
                username "${codeartifactUser}"
                password "${codeartifactToken}"
            }
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.owasp:dependency-check-gradle:${dependencyCheckVersion}"
        classpath "com.github.ben-manes:gradle-versions-plugin:${versionsPluginVersion}"
    }
}

apply plugin: 'java'
// In order to provide plugins for other projects sourcing this script, we must specify the plugins by type
// See https://blog.mrhaki.com/2015/10/gradle-goodness-apply-external-script.html

apply plugin: org.springframework.boot.gradle.plugin.SpringBootPlugin
apply plugin: org.owasp.dependencycheck.gradle.DependencyCheckPlugin
apply plugin: com.github.benmanes.gradle.versions.VersionsPlugin

// Repository block for sourcing dependencies
repositories {
    maven {
        url "https://${codeartifactDomain}-${awsBuildAccountId}.d.codeartifact.eu-west-1.amazonaws.com/maven/oodle-maven-repo/"
        credentials {
            username "${codeartifactUser}"
            password "${codeartifactToken}"
        }
    }
}

dependencyLocking {
    // Enable locking of dependency versions using '--write-locks' to generate a `gradle.lockfile`
    lockAllConfigurations()
}

dependencies {
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation "net.logstash.logback:logstash-logback-encoder:${logstashEncoderVersion}"
    implementation "com.oodlefinance:logging:${oodleLoggingVersion}"

    // Constraints on transitive dependencies. Include a note for when these can be removed.
    constraints {
        implementation("org.yaml:snakeyaml:1.33") {
            // Transitive dependency of spring boot, should be resolved in version 3
            because 'Version < 1.33 has vulnerabilities reported by the OWASP dependency checker'
        }
        implementation('org.springframework.security:spring-security-web:5.7.5') {
            // Transitive dependency of spring boot, should be resolved with spring boot > 2.7.5
            because '5.7.4 and earlier are affected by CVEs'
        }
        implementation('org.springframework.security:spring-security-config:5.7.5') {
            // Transitive dependency of spring boot, should be resolved with spring boot > 2.7.5
            because '5.7.4 and earlier are affected by CVEs'
        }
        implementation("com.fasterxml.woodstox:woodstox-core:6.4.0"){
            // Transitive dependency of apache CXF, should be resolved with versions after 3.5.4
            because '6.3.1 and earlier are affected by CVEs'
        }
    }
}

sourceCompatibility = JavaVersion.valueOf(javaVersion)

// Use a timestamp for a version number
project.version = new SimpleDateFormat("'v'yyyyMMddHHmmss").format(new Date())

// Add additional tasks from oodle-devops repo, as used in jenkinsfile:
def publishArtifacts = new File("${devopsGradleDir}/publishArtifacts.gradle")
def qualityChecks = new File("${devopsGradleDir}/qualityChecks.gradle")
def sonarQube = new File("${devopsGradleDir}/sonarQube.gradle")

if (publishArtifacts.exists()) apply from: publishArtifacts
if (qualityChecks.exists()) apply from: qualityChecks
if (sonarQube.exists()) apply from: sonarQube


build {
    // Before each build, run dependencyUpdates from gradle-versions-plugin
    // This gives a convenient log of all dependency versions used in a build
    dependsOn(tasks.getByName('dependencyUpdates'))
    dependsOn(tasks.getByName('dependencies'))
}

bootJar {
    archiveFileName = "${rootProject.name.toLowerCase()}.jar"
    manifest {
        attributes(
                'Implementation-Version': project.version,
                'Bundle-SymbolicName': project.group,
                'Git-commit-hash': "git rev-parse --verify HEAD".execute().text.trim()
        )
    }
}

test {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'test'
    testLogging {
        events "passed", "skipped", "failed"
    }
}
